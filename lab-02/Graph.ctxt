#BlueJ class context
comment0.target=Graph
comment1.params=vertices\ edges
comment1.target=Graph(java.lang.String[],\ java.lang.String[][])
comment10.params=
comment10.target=java.lang.String\ toString()
comment11.params=a\ b
comment11.target=void\ insertarArco(java.lang.String,\ java.lang.String)
comment11.text=\r\n\ Funci\u00F3n\ que\ inserta\ un\ arco\ entre\ dos\ vertices\ al\ conjunto\ de\ arcos\r\n\ del\ grafo.\r\n\ @param\ String\ vertice\ a\ ,\ String\ vertice\ b\r\n\ @return\ void\r\n
comment12.params=a\ b
comment12.target=void\ eliminarArco(java.lang.String,\ java.lang.String)
comment12.text=\r\n\ Funci\u00F3n\ que\ elimina\ un\ arco\ entre\ dos\ vertices\ del\ conjunto\ de\ arcos\r\n\ del\ grafo.\r\n\ @param\ String\ vertice\ a\ ,\ String\ vertice\ b\r\n\ @return\ void\r\n
comment13.params=vertice
comment13.target=boolean\ enElGrafo(java.lang.String)
comment13.text=\r\n\ Funci\u00F3n\ que\ verifica\ si\ un\ v\u00E9rtice\ dado\ es\ parte\ de\r\n\ el\ conjunto\ de\ vertices\ del\ grafo\r\n\ @param\ String\ vertices\r\n\ @return\ boolean\r\n
comment14.params=
comment14.target=java.util.ArrayList\ losVertices()
comment15.params=
comment15.target=java.util.ArrayList\ losEdges()
comment16.params=b\ c
comment16.target=Graph\ unite(java.lang.String,\ java.lang.String)
comment2.params=start\ end
comment2.target=Graph\ path(java.lang.String,\ java.lang.String)
comment3.params=vertex
comment3.target=java.util.ArrayList\ getNeighbors(java.lang.String)
comment4.params=g
comment4.target=Graph\ union(Graph)
comment5.params=edgeList\ edge
comment5.target=boolean\ containsEdge(java.util.ArrayList,\ java.util.ArrayList)
comment6.params=
comment6.target=int\ vertices()
comment6.text=\r\n\ Retorna\ la\ canridad\ de\ vertices\ del\ grafo\r\n
comment7.params=
comment7.target=int\ edges()
comment7.text=\r\n\ Retorna\ la\ canridad\ de\ aristas\ del\ grafo\r\n
comment8.params=o
comment8.target=boolean\ equals(java.lang.Object)
comment9.params=args
comment9.target=void\ main(java.lang.String[])
numComments=17
